name: Frontend Continuous Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run linting
        run: |
          cd starter/frontend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run tests
        run: |
          cd starter/frontend
          npm run test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run tests
        run: |
          cd starter/frontend
          npm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          echo "Building Docker image..."
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Docker image built successfully"

      - name: Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Docker image pushed successfully"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name coworking-cluster

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Create deployment manifest
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Creating deployment manifest..."
          cat > deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: frontend
            template:
              metadata:
                labels:
                  app: frontend
              spec:
                containers:
                  - name: frontend
                    image: $ECR_REGISTRY/frontend:$IMAGE_TAG
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 3000
                    resources:
                      requests:
                        memory: "64Mi"
                        cpu: "250m"
                      limits:
                        memory: "128Mi"
                        cpu: "500m"
          EOF
          echo "Deployment manifest created"

      - name: Create service manifest
        run: |
          echo "Creating service manifest..."
          cat > service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            type: LoadBalancer
            selector:
              app: frontend
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
          EOF
          echo "Service manifest created"

      - name: Deploy to EKS
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          echo "Deployment completed"
          echo "Checking pod status..."
          kubectl get pods
          echo "Checking services..."
          kubectl get services